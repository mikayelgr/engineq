# NOTE: THIS FILE WAS AUTOMATICALLY GENERATED USING sqlacodegen.
    # DO NOT EDIT THIS FILE MANUALLY!
from typing import List, Optional

from sqlalchemy import Boolean, Date, DateTime, ForeignKeyConstraint, Integer, PrimaryKeyConstraint, String, Uuid, text
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship
import datetime
import uuid

class Base(DeclarativeBase):
    pass


class Subscribers(Base):
    __tablename__ = 'subscribers'
    __table_args__ = (
        PrimaryKeyConstraint('id', name='subscribers_pkey'),
    )

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    license: Mapped[uuid.UUID] = mapped_column(Uuid, server_default=text('gen_random_uuid()'))
    created_at: Mapped[datetime.datetime] = mapped_column(DateTime(True), server_default=text('now()'))

    playlists: Mapped[List['Playlists']] = relationship('Playlists', back_populates='subscribers')


class Tracks(Base):
    __tablename__ = 'tracks'
    __table_args__ = (
        PrimaryKeyConstraint('id', name='tracks_pkey'),
    )

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    title: Mapped[str] = mapped_column(String)
    author: Mapped[str] = mapped_column(String)
    explicit: Mapped[bool] = mapped_column(Boolean, server_default=text('false'))

    suggestions: Mapped[List['Suggestions']] = relationship('Suggestions', back_populates='tracks')


class Playlists(Base):
    __tablename__ = 'playlists'
    __table_args__ = (
        ForeignKeyConstraint(['owner'], ['subscribers.id'], name='playlists_owner_fkey'),
        PrimaryKeyConstraint('id', name='playlists_pkey')
    )

    id: Mapped[datetime.date] = mapped_column(Date, primary_key=True)
    owner: Mapped[Optional[int]] = mapped_column(Integer)

    subscribers: Mapped[Optional['Subscribers']] = relationship('Subscribers', back_populates='playlists')
    suggestions: Mapped[List['Suggestions']] = relationship('Suggestions', back_populates='playlists')


class Suggestions(Base):
    __tablename__ = 'suggestions'
    __table_args__ = (
        ForeignKeyConstraint(['playlist'], ['playlists.id'], name='suggestions_playlist_fkey'),
        ForeignKeyConstraint(['track'], ['tracks.id'], name='suggestions_track_fkey'),
        PrimaryKeyConstraint('id', name='suggestions_pkey')
    )

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    track: Mapped[Optional[int]] = mapped_column(Integer)
    playlist: Mapped[Optional[datetime.date]] = mapped_column(Date)

    playlists: Mapped[Optional['Playlists']] = relationship('Playlists', back_populates='suggestions')
    tracks: Mapped[Optional['Tracks']] = relationship('Tracks', back_populates='suggestions')
